package com.shopping.controller;

import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpSession;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;

import com.shopping.dto.CartDTO;
import com.shopping.service.CartService;


@Controller
@RequestMapping("/cart/*")
public class CartController {
	
	@Autowired
	CartService cartService;
	
	private static final Logger logger = LoggerFactory.getLogger(CartController.class);
	
	// 장바구니 목록 조회
	@RequestMapping("cart.do")
	public String cart(HttpSession session, Model model) throws Exception {
	    // 세션으로 로그인 여부 체크
	    @SuppressWarnings("unchecked")
		Map<String, Object> loginMap = (Map<String, Object>) session.getAttribute("loginMap");

	    if (loginMap != null) {
	        // 로그인 상태
	        String mem_id = (String) loginMap.get("MEM_ID");
	        System.out.println("======================= | 로그인 ID :: " + mem_id + "|=======================");

	        List<CartDTO> cartList = cartService.cartList(mem_id);	// 상품 목록
	        int totalQuantity = cartService.totalQuantity(mem_id);	// 상품 총수량
	        
	        // 장바구니 목록에 배송 정보 추가
	        for (CartDTO cart : cartList) {
	            cart.setDeliveryFee("무료");
	            cart.setDeliveryMethod("택배");
	        }
	        if(totalQuantity <= 0) {
	        	
	        }

	        model.addAttribute("cartList", cartList);
	        model.addAttribute("totalQuantity", totalQuantity != null ? totalQuantity : 0);
	        return "cart/cart";
	    } else {
	        // 로그인 하지 않은 상태 
	        System.out.println("로그인하지 않은 상태..");
	        // 로그인 페이지로 리다이렉트
	        model.addAttribute("loginChk", "chkFail");
	        return "cart/cart";
	    }
	}

	// 장바구니 상품 삭제
	@RequestMapping("cartDelete.do")
	public String cartDelete(@RequestParam int cart_id) throws Exception {
		cartService.cartDelete(cart_id);
		// 삭제 후에도 현재 페이지에 머무르도록 현재 페이지로 리다이렉트
	    return "redirect:/cart/cart.do";
	}
	
}
