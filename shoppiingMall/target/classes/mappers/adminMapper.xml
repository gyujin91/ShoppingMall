<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- 다른 mapper와 중복되지 않도록 네임스페이스 기재 -->
<!-- mapper - mybatis, sqlMap - ibatis -->
<mapper namespace="admin">

	<!-- <sql id="searchSql">
  		<choose>
  			<when test="searchType == 'MEMBER_CODE'">
  				AND MEMBER_CODE LIKE '%'||#{searchTxt}||'%'
  			</when>
  			<when test="searchType == 'mem_id'">
				AND mem_id LIKE '%'||#{searchTxt}||'%'
			</when>
  			<when test="searchType == 'mem_name'">
  				AND mem_name LIKE '%'||#{searchTxt}||'%'
  			</when>
  		</choose>
  		<if test="startDate != null and startDate != ''">
  				AND TO_CHAR(REG_DATE, 'yyyy-MM-dd') BETWEEN #{startDate} AND #{endDate}
  		</if>
  	</sql> -->
	
	<!-- 대쉬보드 회원 목록 불러오기 -->
	<select id="memberList" resultType="com.shopping.dto.MemberDTO">
		SELECT
			MEM_ID,
			MEM_PW,
			MEM_NAME,
			EMAIL,
			PHONE,
			ADDR1,
			ADDR2,
			POST,
			USEYN,
			CODE,
			JOIN_DATE,
			DEL_DATE
		FROM MEMBER 
		WHERE CODE = '2' LIMIT 17	<!-- code1 : 관리자 // code2 : 일반회원 -->
	</select>
	
	<!-- 모든 회원 목록 불러오기 -->
	 <select id="allMemberList" resultType="com.shopping.dto.MemberDTO">
		SELECT
			MEM_ID,
			MEM_PW, 
			MEM_NAME, 
			EMAIL, 
			PHONE,
			ADDR1,
			ADDR2,
			POST, 
			USEYN, 
			JOIN_DATE, 
			DEL_DATE,
			CODE,
			CASE
				WHEN CODE='1' AND USEYN='Y' THEN '관리자'
				WHEN CODE='2' AND USEYN='Y' THEN '일반회원'
				WHEN CODE='2' AND USEYN='N' THEN '탈퇴회원'
				WHEN CODE='3' AND USEYN='N' THEN '정지회원'
			END AS 'MEMBER_CODE'
		FROM MEMBER
		ORDER BY JOIN_DATE DESC
	</select>
	
	<!-- 회원 정보 상세 보기 -->
	<select id="memberInfo" resultType="com.shopping.dto.MemberDTO">
		SELECT
			MEM_ID,
			MEM_PW, 
			MEM_NAME, 
			EMAIL, 
			PHONE, 
			ADDR1,
			ADDR2,
			POST,
			USEYN, 
			JOIN_DATE, 
			DEL_DATE
		FROM MEMBER
		WHERE MEM_ID = #{mem_id}
	</select>
	
	<!-- 회원 정보 수정 -->
	<update id="adminUserUpdate">
		UPDATE MEMBER SET
			MEM_PW = #{mem_pw},
			MEM_NAME = #{mem_name},
			EMAIL = #{email},
			PHONE = #{PHONE},
			ADDR1 = #{addr1},
			ADDR2 = #{addr2},
			POST = #{post} 
		WHERE MEM_ID = #{mem_id}
	</update>
	
	<!--  회원 탈퇴 -->
	<update id="adminUserDelete">
		UPDATE MEMBER SET 
			USEYN = 'N',
			DEL_DATE = NOW()
		WHERE MEM_ID = #{mem_id}
	</update>
	
	<!-- 데쉬보드 주문 목록  조회 -->
	<select id="orderList" resultType="com.shopping.dto.OrderDTO">
	    SELECT 
		    ORDER_NO,
		    MEM_ID,
		    MEM_NAME,
		    PHONE,
		    EMAIL,
		    PROD_NO,
		    PROD_NAME,
		    PROD_IMAGE,
		    PRICE,
		    QUANTITY,
		    SIZE,
		    DELIVERYFEE,
		    POST,
		    ADDR1,
		    ADDR2,
		    ORDER_DATE,
		    DEL_DATE,
		    CASE
		        WHEN ORDER_STATE = 'orderCompleted' THEN '주문 완료'
		        WHEN ORDER_STATE = 'orderCancel' THEN '주문 취소'
		    END AS ORDER_STATE,
		    CASE
		        WHEN PAYMENT_STATE = 'depositCompleted' THEN '입금 완료' 
		        WHEN PAYMENT_STATE = 'completePayment' THEN '결제 완료'
		        WHEN PAYMENT_STATE = 'refundExpected' THEN '환불 예정'
		        WHEN PAYMENT_STATE = 'paymentCancel' THEN '결제 취소'
		        ELSE PAYMENT_STATE
		    END AS PAYMENT_STATE,
		    CASE
		        WHEN PAYMENT_METHOD = 'bankTransfer' THEN '무통장 입금'
		        WHEN PAYMENT_METHOD = 'creditCard' THEN '카드'
		    END AS PAYMENT_METHOD
		FROM TRANSACTION
		ORDER BY ORDER_DATE DESC
		LIMIT 14;
	</select>
	
	<!-- 주문 목록 전체 조회 -->
	<select id="allOrderList" resultType="com.shopping.dto.OrderDTO">
	    SELECT 
		    ORDER_NO,
		    MEM_ID,
		    MEM_NAME,
		    PHONE,
		    EMAIL,
		    PROD_NO,
		    PROD_NAME,
		    PROD_IMAGE,
		    PRICE,
		    QUANTITY,
		    SIZE,
		    DELIVERYFEE,
		    POST,
		    ADDR1,
		    ADDR2,
		    ORDER_DATE,
		    DEL_DATE,
		    CASE
		        WHEN ORDER_STATE = 'orderCompleted' THEN '주문 완료'
		        WHEN ORDER_STATE = 'orderCancel' THEN '주문 취소'
		    END AS ORDER_STATE,
		    CASE
		        WHEN PAYMENT_STATE = 'depositCompleted' THEN '입금 완료' 
		        WHEN PAYMENT_STATE = 'completePayment' THEN '결제 완료'
		        WHEN PAYMENT_STATE = 'refundExpected' THEN '환불 예정'
		        WHEN PAYMENT_STATE = 'paymentCancel' THEN '결제 취소'
		        ELSE PAYMENT_STATE
		    END AS PAYMENT_STATE,
		    CASE
		        WHEN PAYMENT_METHOD = 'bankTransfer' THEN '무통장 입금'
		        WHEN PAYMENT_METHOD = 'creditCard' THEN '카드'
		    END AS PAYMENT_METHOD
		FROM TRANSACTION
		ORDER BY ORDER_DATE DESC
	</select>
	
	<!-- 주문 목록 조회 -->
	<select id="orderInfo" resultType="com.shopping.dto.OrderDTO">
	    SELECT 
		    ORDER_NO,
		    MEM_ID,
		    MEM_NAME,
		    PHONE,
		    EMAIL,
		    PROD_NO,
		    PROD_NAME,
		    PROD_IMAGE,
		    PRICE,
		    QUANTITY,
		    SIZE,
		    DELIVERYFEE,
		    POST,
		    ADDR1,
		    ADDR2,
		    ORDER_DATE,
		    DEL_DATE,
		    CASE
		        WHEN ORDER_STATE = 'orderCompleted' THEN '주문 완료'
		        WHEN ORDER_STATE = 'orderCancel' THEN '주문 취소'
		    END AS ORDER_STATE,
		    CASE
		        WHEN PAYMENT_STATE = 'depositCompleted' THEN '입금 완료' 
		        WHEN PAYMENT_STATE = 'completePayment' THEN '결제 완료'
		        WHEN PAYMENT_STATE = 'refundExpected' THEN '환불 예정'
		        WHEN PAYMENT_STATE = 'paymentCancel' THEN '결제 취소'
		        ELSE PAYMENT_STATE
		    END AS PAYMENT_STATE,
		    CASE
		        WHEN PAYMENT_METHOD = 'bankTransfer' THEN '무통장 입금'
		        WHEN PAYMENT_METHOD = 'creditCard' THEN '카드'
		    END AS PAYMENT_METHOD
		FROM TRANSACTION
		WHERE ORDER_NO = #{order_no}
	</select>
	
	<!-- 사용자들 각각의 (주문 * 수량) 금액 조회 -->
	<select id="userTotalPrice" resultType="map">
		SELECT 
		    T.MEM_ID,
		    SUM(T.PRICE * T.QUANTITY) AS TOTAL_PRICE
		FROM TRANSACTION T
			LEFT JOIN PAYMENT P ON T.ORDER_NO = P.ORDER_NO
		GROUP BY T.MEM_ID;
	</select>
	
	<!-- 모든 공지 목록 조회 -->
	<select id="allNoticeList" resultType="com.shopping.dto.NoticeDTO">
		SELECT 
			NUM,
			TITLE,
			CONTENT,
			AUTHOR,
			REGDATE,
			VIEW_CNT,
			USEYN
		FROM NOTICE ORDER BY NUM DESC
	</select>
	
	<!-- 리뷰 조회 -->
	<select id="selectReviewList" resultType="com.shopping.dto.ReviewDTO">
		SELECT 
		    R.RNO,
		    R.REVIEW_TITLE,
		    R.REVIEW_CONTENT,
		    M.MEM_ID,
		    M.MEM_NAME,
		    R.PROD_NO,
		    P.PROD_NAME,
		    P.PROD_IMAGE,
		    R.REVIEW_REGDATE,
		    R.REPLY,
		    R.REPLY_ID,
		    R.REPLY_NAME,
		    R.REPLY_REGDATE AS REPLY_DATE,
		    R.USEYN
		FROM 
		    REVIEW R
		JOIN 
		    PRODUCT P ON R.PROD_NO = P.PROD_NO
		JOIN 
		    MEMBER M ON R.MEM_ID = M.MEM_ID
		ORDER BY 
		    R.REVIEW_REGDATE DESC;				
	</select>
	
	<!-- 관리자 댓글 -->
	<update id="insertReply" parameterType="com.shopping.dto.ReviewDTO">
		UPDATE REVIEW SET
			REPLY = #{reply},
		    REPLY_ID = #{reply_id},
		    REPLY_NAME = #{reply_name},
		    REPLY_UPDATE = DATE_FORMAT(NOW(), '%Y%m%d%H%i%s')
		WHERE RNO = #{rno}
	</update>
</mapper> 